-убрать инлайновую вставку цсс из тега style в билде (done)
-подключать стили через link в билде (done)
-чистить цсс-файл от неиспользуемых классов (purgecss) (done)
-добавить плагин для сжатия цсс в билде
-добавить плагин для сжатия js в билде
-добавить Drawer с выбором задач (done)
-добавить кастомные алерты/попапы, которые будут забирать результат выполнения console.log()
-добавить переключалку тем (done)
-обернуть переключалку тем в тултип c динамичной подсказкой (done)
-при наведении на переключалку показать анимацию с куском интерфейса в инверсированных цветах (демо темы - done)
-пофиксить логику сохранения выбора темы (done)
-сделать кастомный скроллбар или поискать готовые решения (done)
-добавить анимацию на логотип

изменение первичной архитектуры (таски заполняются в vscode в папке src --> таски заполняются в форме приложения и отправляются/извлекаются из LS)
-создать модели и структуру данных для задач
    -у задачи будет своя модель-объект с тематическими ключами
    -все объекты будут храниться в массиве задач
-создать CRUD для описания задачи через textarea, localStorage etc.
    -создать поле для текста задачи textarea, куда будешь вводить скопированный текст с markdown тегами
    -сохранять текст задачи в localStorage в массиве задач (массив объектов)
    -при не пустом массиве задач показывать DrawerTrigger и при открытии Drawer показывать коллекцию задач через их алиасы
    -при выборе задачи из коллекции Drawer извлекать ее текст из массива объектов, отправлять исходный текст с тегами на свой псевдосервер, где он будет конвертиться в html через marked и получать в контейнер готовую разметку с текстом задачи

потом почти тоже самое для кода с решением задачи